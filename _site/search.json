[
  
    {
      "title"    : "Building a Container Image on OpenShift Using GitLab CI/CD",
      "category" : "",
      "tags"     : "Openshift",
      "url"      : "/post/2024/06/11/gitlab-openshift.html",
      "date"     : "Jun 11, 2024",
      "content"  : "Building and Deploying a Container Image on OpenShift using GitLab CI/CDIn this blog post, we’ll walk through the process of building a container image using OpenShift and GitLab CI/CD. We will utilize the .gitlab-ci.yaml file, a Dockerfile, and some simple HTML and Python code to demonstrate the build process. This guide assumes you have some basic knowledge of GitLab CI/CD and OpenShift.PrerequisitesBefore we begin, ensure you have the following:  Access to an OpenShift cluster.  A GitLab repository.  Necessary permissions to create and manage projects in OpenShift.Step 1: Setting up the GitLab CI/CD PipelineFirst, we need to define our GitLab CI/CD pipeline in a .gitlab-ci.yaml file. This file specifies the stages and jobs that GitLab will execute.Here’s an example of the .gitlab-ci.yaml file:stages:          # List of stages for jobs, and their order of execution  - build#  - testbuild-job:       # This job runs in the build stage, which runs first.  stage: build  script:    - wget -qO- https://downloads-openshift-console.apps.cluster-h4js2.sandbox553.opentlc.com/amd64/linux/oc.tar  |tar xf -     - chmod +x ./oc     - echo &quot;Login to OCP&quot;    - ./oc login --insecure-skip-tls-verify=true --token=&quot;$OCP_TOKEN&quot; --server=&quot;$OCP_SERVER&quot;    - echo &quot;Selecting project&quot;    - ./oc project &quot;${OCP_PROJECT}&quot;    - ./oc start-build my-docker-build --from-dir . -F#    - echo &quot;Building image.&quot;# unit-test-job:   # This job runs in the test stage.#   stage: test    # It only starts when the job in the build stage completes successfully.#   script:#     - echo &quot;Running unit tests... This will take about 60 seconds.&quot;#     - sleep 60#     - echo &quot;Code coverage is 90%&quot;# Change : https://downloads-openshift-console.apps.cluster-h4js2.sandbox553.opentlc.com with your Openshift API url.Add the Variables in the project on GITLAB :  OCP_PROJECT : name of the namespace in Openshift for the project  OCP_SERVER  : url of the Openshift API  OCP_TOKEN   : Token for the authentification on OpenshiftStep 2: Creating the Container File (Dockerfile)Next, we need to create a Dockerfile which will define our container image. Here’s a simple example:FROM python:3ADD index.html index.htmlADD server.py server.pyEXPOSE 8888ENTRYPOINT [&quot;python3&quot;, &quot;server.py&quot;]Step 3: Adding Application CodeWe’ll create a simple HTML file and a Python server script to include in our container image.index.html:&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div align=&quot;center&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;Test OK&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;&amp;lt;img src=&quot;https://blog.fklein.me/images/Logo-Red_Hat.png&quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;server.py:#!/usr/bin/python3from http.server import BaseHTTPRequestHandler, HTTPServerimport timeimport jsonfrom socketserver import ThreadingMixInimport threadinghostName = &quot;0.0.0.0&quot;serverPort = 8888class Handler(BaseHTTPRequestHandler):  def do_GET(self):      # curl http://&amp;lt;ServerIP&amp;gt;/index.html      if self.path == &quot;/&quot;:          # Respond with the file contents.          self.send_response(200)          self.send_header(&quot;Content-type&quot;, &quot;text/html&quot;)          self.end_headers()          content = open(&#39;index.html&#39;, &#39;rb&#39;).read()          self.wfile.write(content)      else:          self.send_response(404)      returnclass ThreadedHTTPServer(ThreadingMixIn, HTTPServer):  &quot;&quot;&quot;Handle requests in a separate thread.&quot;&quot;&quot;if __name__ == &quot;__main__&quot;:  webServer = ThreadedHTTPServer((hostName, serverPort), Handler)  print(&quot;Server started http://%s:%s&quot; % (hostName, serverPort))  try:      webServer.serve_forever()  except KeyboardInterrupt:      pass  webServer.server_close()  print(&quot;Server stopped.&quot;)Step 4: Configuring OpenShiftTo build our Docker image in OpenShift, we need to create a BuildConfig. This configuration can be created using the following command:oc new-build --binary --strategy=docker --name my-docker-buildStep 5: Running the BuildThe final step is to trigger the build from GitLab. The .gitlab-ci.yaml file we created earlier includes the necessary commands to login to OpenShift, select the project, and start the build.You just need to commit the files to the GITLAB repo to trigger the build.Step 6: Deploy the containerOn Openshift UI, on the Developer profile, click on +Add, and Container ImagesSelect Image stream tag from internal registry and select the image you have builded, and click on create.Your app is deployedConclusionWith these steps, you’ve set up a CI/CD pipeline in GitLab to build a Docker image using OpenShift. This integration allows you to leverage the powerful features of both platforms to streamline your development and deployment processes.For more detailed information on builds in OpenShift, you can refer to the Builds for OpenShift Overview.Happy building!References  Red Hat OpenShift Documentation  GitLab CI/CD DocumentationThis guide should help you get started with building and deploying container images using GitLab CI/CD and OpenShift. If you have any questions or run into issues, feel free to reach out for support.",
      "article"  : "<div class='article col col-4 col-d-6 col-t-12 animate'> <div class='article__inner'> <div class='article__head'> <time class='article__date' datetime='2024-06-11T14:01:35+02:00'>11 Jun 2024</time><a class='article__image' href='/post/2024/06/11/gitlab-openshift.html'> <img src='/images/02.png' alt='Building a Container Image on OpenShift Using GitLab CI/CD'> </a></div><div class='article__content'> <h2 class='article__title'> <a href='/post/2024/06/11/gitlab-openshift.html'>Building a Container Image on OpenShift Using GitLab CI/CD</a> </h2><p class='article__excerpt'>Learn how to streamline your CI/CD pipeline by integrating GitLab with OpenShift to build and deploy container images. This step-by-step guide covers the setup of the .gitlab-ci.yaml file, creating a Dockerfile, adding application code, configuring OpenShift, and running the build. Perfect for developers looking to leverage the power of GitLab and OpenShift for efficient container management and deployment.</p></div></div></div>"
    } 
  
]

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>ASA Blog</title>
        <description>Frédéric KLEIN personal Blog</description>
        <link>http://localhost:4000/</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
        <pubDate>Mon, 14 Apr 2025 20:14:30 +0200</pubDate>
        <lastBuildDate>Mon, 14 Apr 2025 20:14:30 +0200</lastBuildDate>
        <generator>Jekyll v4.4.1</generator>
        
            <item>
                <title>Driving OpenShift with Claude Desktop and the Model Context Protocol (MCP)</title>
                <description>&lt;h1 id=&quot;supercharging-openshift-with-claude-desktop-and-mcp-natural-language-meets-cloud-native-ops&quot;&gt;Supercharging OpenShift with Claude Desktop and MCP: Natural Language Meets Cloud-native Ops&lt;/h1&gt;

&lt;h2 id=&quot;from-kubecon-to-openshift-why-i-built-this-demo&quot;&gt;From KubeCon to Openshift: Why I Built This Demo&lt;/h2&gt;

&lt;p&gt;After attending the &lt;strong&gt;KubeCon Europe 2025&lt;/strong&gt;, one major takeaway was clear:&lt;br /&gt;
AI is no longer a side topic — it’s central to the future of infrastructure and developer experience.&lt;/p&gt;

&lt;p&gt;Many sessions focused on how to &lt;strong&gt;hide infrastructure complexity&lt;/strong&gt; through approaches like &lt;strong&gt;Platform Engineering&lt;/strong&gt; and &lt;strong&gt;AI-powered developer tools&lt;/strong&gt;. I came home inspired to test it out myself.&lt;/p&gt;

&lt;p&gt;So I built a simple demo: using &lt;strong&gt;Claude Desktop&lt;/strong&gt;, &lt;strong&gt;OpenShift&lt;/strong&gt;, and the &lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt; to show how natural language can drive real actions in a live Kubernetes cluster.&lt;/p&gt;

&lt;p&gt;And yes — it works. Let me show you how.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/list-pods.png&quot; alt=&quot;claude&quot; title=&quot;claude&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-mcp--model-context-protocol&quot;&gt;What is MCP – Model Context Protocol?&lt;/h2&gt;

&lt;p&gt;Connecting AI models to real-world systems like APIs, databases, or Kubernetes is usually complex and requires custom code.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Model Context Protocol (MCP)&lt;/strong&gt;, created by Anthropic, is an &lt;strong&gt;open standard&lt;/strong&gt; that makes this much easier.&lt;/p&gt;

&lt;p&gt;It allows AI models (like Claude) to understand the context and &lt;strong&gt;safely perform actions&lt;/strong&gt; by talking to small programs called &lt;strong&gt;MCP servers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mcp-server.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-kubernetes-mcp-server-built-by-marc-nuri&quot;&gt;A Kubernetes MCP Server, Built by &lt;a href=&quot;https://www.linkedin.com/in/marcnuri/&quot;&gt;Marc Nuri&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;My colleague &lt;a href=&quot;https://www.linkedin.com/in/marcnuri/&quot;&gt;Marc&lt;/a&gt; at Red Hat has developed a open-source MCP server implementation:&lt;br /&gt;
🔗 &lt;a href=&quot;https://github.com/manusa/kubernetes-mcp-server&quot;&gt;kubernetes-mcp-server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This MCP server can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Connect to any Kubernetes or OpenShift cluster&lt;/li&gt;
  &lt;li&gt;Read and manage pods, namespaces, events, deployments, and more&lt;/li&gt;
  &lt;li&gt;Show pod logs, execute commands, and even run containers&lt;/li&gt;
  &lt;li&gt;Work seamlessly with Claude Desktop or VS Code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It runs locally with no dependency on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;helm&lt;/code&gt;, or other CLI tools — lightweight, flexible, and ready to use.&lt;/p&gt;

&lt;h2 id=&quot;live-demo-claude-diagnoses-and-fixes-a-broken-pod-on-openshift&quot;&gt;Live Demo: Claude Diagnoses and Fixes a Broken Pod on OpenShift&lt;/h2&gt;

&lt;p&gt;Let’s walk through a simple and visual demo you can try today.&lt;/p&gt;

&lt;p&gt;We’ll deploy a pod that fails to start (due to a bad image), then use Claude to identify the issue and fix it — using natural language only.&lt;/p&gt;

&lt;h3 id=&quot;what-you-need&quot;&gt;What You Need&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;strong&gt;Mac&lt;/strong&gt; with &lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.anthropic.com/index/claude-desktop&quot;&gt;Claude Desktop&lt;/a&gt; installed&lt;/li&gt;
  &lt;li&gt;A running &lt;strong&gt;OpenShift&lt;/strong&gt; cluster (for example on AWS like me)&lt;/li&gt;
  &lt;li&gt;OpenShift CLI (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oc&lt;/code&gt;):&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;openshift-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sure you can log in to your OpenShift cluster:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc login &amp;lt;cluster-url&amp;gt; &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sha256-...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;-step-1-connect-claude-to-the-mcp-server&quot;&gt;🔧 Step 1: Connect Claude to the MCP server&lt;/h3&gt;

&lt;p&gt;Open this file:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;open ~/Library/Application&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Support/Claude&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;Desktop/claude_desktop_config.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And add:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;mcpServers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;npx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-y&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes-mcp-server@latest&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then restart Claude Desktop and verify that the MCP Server is running.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/run_ok.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-create-a-broken-pod&quot;&gt;Step 2: Create a Broken Pod&lt;/h3&gt;

&lt;p&gt;Let’s create a pod in a new namespace, using a non-existent image.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc create namespace demo

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; | oc apply -f -
apiVersion: v1
kind: Pod
metadata:
  name: mon-app
  namespace: demo
  labels:
    app: mon-app
spec:
  containers:
    - name: web
      image: nginx:doesnotexist
      ports:
        - containerPort: 80
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The pod will fail with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImagePullBackOff&lt;/code&gt; error.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/pod_errors.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/ocp-errors.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-3-let-claude-fix-it&quot;&gt;Step 3: Let Claude Fix It&lt;/h3&gt;

&lt;p&gt;In Claude Desktop, simply type:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Diagnose and fix the pod `mon-app` in the `demo` namespace.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Claude will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Inspect the pod and retrieve logs and events&lt;/li&gt;
  &lt;li&gt;Detect the image error&lt;/li&gt;
  &lt;li&gt;Suggest replacing the image with a working version (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nginx:latest&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Apply the change if you confirm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All this, using natural language and the MCP server — no CLI needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/diagnose_and_solve.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-4-clean-up&quot;&gt;Step 4: Clean Up&lt;/h3&gt;

&lt;p&gt;Once you’re done:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc delete namespace demo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;security-considerations&quot;&gt;Security Considerations&lt;/h2&gt;

&lt;p&gt;While this is a great demo, keep in mind:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The MCP server uses your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.kube/config&lt;/code&gt;, meaning &lt;strong&gt;full access&lt;/strong&gt; to your cluster&lt;/li&gt;
  &lt;li&gt;You should always use &lt;strong&gt;dedicated service accounts&lt;/strong&gt; with limited permissions (RBAC)&lt;/li&gt;
  &lt;li&gt;Don’t test this on production environments&lt;/li&gt;
  &lt;li&gt;Monitor all actions and keep audit logs enabled&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The good news: the MCP protocol itself supports &lt;strong&gt;permission control and sandboxing&lt;/strong&gt; — but you still need to apply best practices.&lt;/p&gt;

&lt;h2 id=&quot;bonus-openshift-lightspeed-️&quot;&gt;Bonus: OpenShift Lightspeed ⚡️&lt;/h2&gt;

&lt;p&gt;Red Hat also offers a &lt;strong&gt;built-in AI assistant&lt;/strong&gt; for OpenShift:&lt;br /&gt;
👉 &lt;a href=&quot;https://www.redhat.com/en/products/interactive-walkthrough/red-hat-openshift-lightspeed&quot;&gt;OpenShift Lightspeed&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lightspeed enables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;YAML generation and validation with AI&lt;/li&gt;
  &lt;li&gt;Built-in troubleshooting suggestions&lt;/li&gt;
  &lt;li&gt;Secure, production-ready GenAI workflows — right in the OpenShift web console&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If MCP + Claude is the open playground for experimentation, &lt;strong&gt;Lightspeed is the enterprise solution&lt;/strong&gt;, fully integrated and supported.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;-whats-next&quot;&gt;🧭 What’s Next?&lt;/h2&gt;

&lt;p&gt;In my &lt;strong&gt;next blog post&lt;/strong&gt;, I’ll dive into &lt;strong&gt;OpenShift Lightspeed&lt;/strong&gt; — how it works, and how it helps DevOps teams.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/lightspeed.png&quot; alt=&quot;mcp&quot; title=&quot;mcp&quot; /&gt;&lt;/p&gt;
</description>
                <pubDate>Mon, 14 Apr 2025 09:00:00 +0200</pubDate>
                <link>http://localhost:4000/post/2025/04/14/ocp-claude.html</link>
                <guid isPermaLink="true">http://localhost:4000/post/2025/04/14/ocp-claude.html</guid>
                
                <category>AI</category>
                
                
            </item>
        
            <item>
                <title>Hashicorp Terraform Entreprise with Red Hat Ansible Automation Platform</title>
                <description>&lt;p&gt;As IT environments shift from traditional on-premise data centers to multi-cloud ecosystems, organizations need scalable, secure, and efficient solutions for Infrastructure as Code (IaC). &lt;/p&gt;

&lt;p&gt;By leveraging &lt;strong&gt;Red Hat’s Ansible Automation Platform&lt;/strong&gt; and &lt;strong&gt;HashiCorp’s Terraform Enterprise&lt;/strong&gt;, organizations can unlock new levels of automation and governance across hybrid and multi-cloud resources.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/images/aapxtfe.png&quot; width=&quot;50%&quot; height=&quot;50%&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;the-power-of-integration&quot;&gt;The Power of Integration&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;Ansible Automation Platform&lt;/strong&gt; excels in application deployment and configuration management, while &lt;strong&gt;Terraform Enterprise&lt;/strong&gt; is the go-to solution for infrastructure provisioning at scale. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/tfe.png&quot; alt=&quot;aap x tfe&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/aap2.png&quot; alt=&quot;aap x tfe&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Together, they enable:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Provisioning Infrastructure&lt;/strong&gt;: Terraform Enterprise allows for the provisioning of scalable and secure IaaS or PaaS resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configuring and Enforcing Compliance&lt;/strong&gt;: Ansible Automation Platform finalizes infrastructure configurations, applies policies, and enforces them to meet organizational standards.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/images/versus.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;some-use-cases-for-aap-and-tfe-integration-examples-&quot;&gt;Some Use Cases for AAP and TFE Integration examples : &lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Dynamic Data and Configuration&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Configuring operating systems or application environments.&lt;/li&gt;
      &lt;li&gt;Adjusting database configurations, logical files, or connection strings.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compliance at Launch&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Enforcing organizational policies directly via Ansible playbooks.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Hybrid Environments&lt;/strong&gt;:
    &lt;ul&gt;
      &lt;li&gt;Managing environments with components that require both API-based and SSH-based interactions.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This integration addresses critical challenges such as drift management, state file corruption, and performance bottlenecks in CI/CD workflows.&lt;/p&gt;

&lt;h1 id=&quot;integration-methods-aap-provider-or-run-tasks&quot;&gt;Integration Methods: AAP Provider or Run Tasks&lt;/h1&gt;
&lt;p&gt;The integration between Ansible Automation Platform (AAP) and Terraform Enterprise (TFE) can be achieved using two main methods: the AAP Provider for Terraform or Terraform Run Tasks. Each method offers distinct advantages depending on the use case.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;AAP Provider for Terraform:&lt;/strong&gt; This approach integrates Ansible into the Terraform workflow by leveraging playbooks. It enables the orchestration of infrastructure, dynamic inventory management, and the execution of Ansible jobs as part of a Terraform run. This tightly coupled approach is well-suited for scenarios where provisioning and configuration management need to be closely aligned.&lt;/li&gt;
&lt;/ul&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/images/schemapp.png&quot; width=&quot;70%&quot; height=&quot;70%&quot; /&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Run Tasks:&lt;/strong&gt; Terraform Enterprise’s run tasks allow Ansible Automation Platform workflows to be triggered at specific stages of a Terraform run. This loosely coupled method ensures modularity, enabling Terraform and Ansible to operate independently while maintaining a synchronized workflow. Keep in mind that inventory synchronisation needs to be developed there.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By selecting the appropriate method based on operational needs, organizations can maximize the benefits of both platforms, achieving efficient infrastructure automation while ensuring scalability and flexibility.&lt;/p&gt;

&lt;h1 id=&quot;inventory-management&quot;&gt;Inventory Management&lt;/h1&gt;
&lt;p&gt;A key element in the integration between Ansible Automation Platform (AAP) and Terraform Enterprise (TFE) is inventory management. Ansible Automation Platform relies on inventories to define which systems and resources it manages. When integrated with Terraform Enterprise, inventories can be dynamically updated during the provisioning process. This ensures that newly provisioned resources are immediately included within Ansible’s scope for configuration and compliance.&lt;/p&gt;

&lt;p&gt;With dynamic inventory management:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Automatic Registration:&lt;/strong&gt; Terraform can automatically register newly provisioned infrastructure resources into Ansible’s inventory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adaptive Management:&lt;/strong&gt; AAP can dynamically adapt to changes in the environment without requiring manual updates, ensuring consistent configuration and management of all resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Simplified Complexity:&lt;/strong&gt; Hybrid or multi-cloud environments benefit from seamless synchronization between Terraform’s provisioning and Ansible’s configuration tasks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This dynamic approach significantly reduces the risk of configuration drift and ensures that infrastructure changes are accurately reflected in automation workflows, enhancing both efficiency and reliability.&lt;/p&gt;

&lt;h1 id=&quot;architectural-overview-&quot;&gt;Architectural Overview :&lt;/h1&gt;
&lt;p&gt;The integration follows a &lt;strong&gt;GitLab → Terraform Enterprise → Ansible Automation Platform&lt;/strong&gt; workflow:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Code Submission&lt;/strong&gt;: Developers push code to GitLab.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Provisioning&lt;/strong&gt;: Terraform Enterprise provisions infrastructure resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Configuration&lt;/strong&gt;: Ansible Automation Platform applies the necessary configurations and enforces compliance policies.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This approach ensures a consistent, traceable, and automated pipeline from infrastructure creation to configuration.&lt;/p&gt;

&lt;h1 id=&quot;steps-details-&quot;&gt;Steps details : &lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;&lt;img src=&quot;/images/schemaap2.png&quot; alt=&quot;aap x tfe&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;aap-provider-example-&quot;&gt;AAP Provider example  : &lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Prerequisites:&lt;/strong&gt; we need the playbook id to be able to call it from the AAP Provider (it can be obtained from the AAP UI url). Of course it can also be automated another way to retrieve the id from the playbook name.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://registry.terraform.io/providers/ansible/aap/latest/docs/resources/job&quot;&gt;https://registry.terraform.io/providers/ansible/aap/latest/docs/resources/job&lt;/a&gt; &lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;provider&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt;                 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aap_host_url&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;username&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aap_username&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aap_password&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_host_url&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_username&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_password&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;job_template_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The job template id&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_inventory&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;my_inventory&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;TFE_Apache-servers&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_host&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;create_host&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;inventory_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aap_inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my_inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;terraform_remote_state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws-ec2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ec2_first_addr&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aap_job&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;run_job_template&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;job_template_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;job_template_id&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;inventory_id&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aap_inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;my_inventory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;extra_vars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;EOT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;inventory&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${aap_inventory.my_inventory.name}&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;EOT&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;terraform-aap-provider-lifecycle-and-inventory-impact-&quot;&gt;Terraform AAP Provider lifecycle and inventory impact : &lt;/h1&gt;

&lt;h2 id=&quot;create-phase&quot;&gt;Create Phase&lt;/h2&gt;
&lt;p&gt;When Terraform provisions new infrastructure (e.g., VMs, containers, networks), the Terraform Provider for AAP updates the AAP inventory. This means that as soon as new resources are provisioned, the AAP inventory is automatically updated to include these new resources. This dynamic inventory management ensures that Ansible can immediately start managing and configuring the newly provisioned resources.&lt;/p&gt;

&lt;h2 id=&quot;destroy-phase&quot;&gt;Destroy Phase&lt;/h2&gt;
&lt;p&gt;When Terraform destroys resources, the Terraform Provider for AAP updates the AAP inventory to remove the corresponding entries for the destroyed resources. This ensures that Ansible no longer attempts to manage or interact with resources that no longer exist, maintaining the accuracy and relevance of the inventory.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-inventory-management&quot;&gt;Dynamic Inventory Management&lt;/h2&gt;
&lt;p&gt;By integrating Terraform with the Ansible Automation Platform, you can create a dynamic inventory management system. This system automatically updates the inventory based on the current state of your infrastructure, as managed by Terraform. This is particularly useful in environments where infrastructure changes frequently, as it reduces the need for manual updates to the inventory.&lt;/p&gt;

&lt;h2 id=&quot;automation-workflow&quot;&gt;Automation Workflow&lt;/h2&gt;
&lt;p&gt;Combining Terraform and Ansible allows for a seamless automation workflow. Terraform handles the provisioning and de-provisioning of infrastructure, while Ansible takes care of configuration management and application deployment. This integration ensures that your infrastructure and applications are always in sync, reducing the risk of configuration drift and improving overall efficiency.&lt;/p&gt;

&lt;h3 id=&quot;example-workflow-&quot;&gt;Example Workflow : &lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Provision Infrastructure:&lt;/strong&gt; Terraform provisions new resources and updates the AAP inventory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Update Inventory:&lt;/strong&gt; Ansible reads the updated AAP inventory and is ready to manage the new resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Run Playbooks:&lt;/strong&gt; Ansible runs playbooks to configure and deploy applications on the newly provisioned resources.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Destroy Infrastructure:&lt;/strong&gt; Terraform destroys resources and updates the AAP inventory.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Remove Inventory Entries:&lt;/strong&gt; Ansible removes the corresponding entries from its inventory.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This lifecycle ensures that Ansible always has an accurate view of the current state of your infrastructure, enabling efficient and reliable automation.&lt;/p&gt;

&lt;h1 id=&quot;take-aways-&quot;&gt;Take Aways : &lt;/h1&gt;
&lt;p&gt;Combining Terraform Enterprise and Ansible Automation Platform offers organizations a powerful, cohesive solution for managing infrastructure in complex, multi-cloud environments. This integration provides scalability, security, and efficiency, enabling teams to accelerate delivery while minimizing risk.&lt;/p&gt;

&lt;h1 id=&quot;sources-&quot;&gt;Sources :&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;AAP Terraform provider:&lt;/strong&gt; &lt;a href=&quot;https://github.com/ansible/terraform-provider-aap&quot;&gt;https://github.com/ansible/terraform-provider-aap&lt;/a&gt; 
(warning : the Terraform AAP Provider for AAP 2.5 is not yet released)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github Demo:&lt;/strong&gt; &lt;a href=&quot;https://github.com/Sokren/aap-tfc&quot;&gt;https://github.com/Sokren/aap-tfc&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;authors&quot;&gt;Authors&lt;/h3&gt;
&lt;p&gt;This blog post was &lt;strong&gt;co-written&lt;/strong&gt; with my friends from HashiCorp &lt;a href=&quot;https://www.linkedin.com/in/r%C3%A9mi-salandre-a53bb13a/&quot;&gt;&lt;strong&gt;Rémi Salandre&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.linkedin.com/in/cetinardal/&quot;&gt;&lt;strong&gt;Çetin Ardal&lt;/strong&gt;&lt;/a&gt;, and from Red Hat &lt;a href=&quot;https://www.linkedin.com/in/david-jakubowicz-2116051/&quot;&gt;&lt;strong&gt;David Jakubowicz&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;linkedin-&quot;&gt;Linkedin :&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/r%C3%A9mi-salandre-a53bb13a/&quot;&gt;Rémi Salandre - HashiCorp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/cetinardal/&quot;&gt;Çetin ARDAL - HashiCorp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/david-jakubowicz-2116051/&quot;&gt;David Jakubowicz - Red Hat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/fklein82/&quot;&gt;Frédéric Klein - Red Hat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
  &lt;img src=&quot;/images/remi.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
  &lt;img src=&quot;/images/cetin.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
  &lt;img src=&quot;/images/david.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
  &lt;img src=&quot;/images/fred.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
                <pubDate>Thu, 19 Dec 2024 13:01:35 +0100</pubDate>
                <link>http://localhost:4000/post/2024/12/19/tfe-x-aap.html</link>
                <guid isPermaLink="true">http://localhost:4000/post/2024/12/19/tfe-x-aap.html</guid>
                
                <category>IAC</category>
                
                
            </item>
        
            <item>
                <title>Building a Container Image on OpenShift Using GitLab CI/CD</title>
                <description>&lt;h2 id=&quot;building-and-deploying-a-container-image-on-openshift-using-gitlab-cicd&quot;&gt;Building and Deploying a Container Image on OpenShift using GitLab CI/CD&lt;/h2&gt;

&lt;p&gt;In this blog post, we’ll walk through the process of building a container image using OpenShift and GitLab CI/CD. We will utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; file, a Dockerfile, and some simple HTML and Python code to demonstrate the build process. This guide assumes you have some basic knowledge of GitLab CI/CD and OpenShift.&lt;/p&gt;

&lt;h3 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h3&gt;

&lt;p&gt;Before we begin, ensure you have the following:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Access to an OpenShift cluster. You can try Openshift with our free Sandbox : 
&lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;developer-sandbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A GitLab repository. &lt;a href=&quot;https://developers.redhat.com/developer-sandbox&quot;&gt;GitLab Ultimate free trial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Necessary permissions to create and manage projects in OpenShift.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-1-setting-up-the-gitlab-cicd-pipeline&quot;&gt;Step 1: Setting up the GitLab CI/CD Pipeline&lt;/h3&gt;

&lt;p&gt;First, we need to define our GitLab CI/CD pipeline in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; file. This file specifies the stages and jobs that GitLab will execute.&lt;/p&gt;

&lt;p&gt;Here’s an example of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;# List of stages for jobs, and their order of execution&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;build-job&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# This job runs in the build stage, which runs first.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wget -qO- https://downloads-openshift-console.apps.cluster-h4js2.sandbox553.opentlc.com/amd64/linux/oc.tar  |tar xf -&lt;/span&gt; 
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;chmod +x ./oc&lt;/span&gt; 
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Login to OCP&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./oc login --insecure-skip-tls-verify=true --token=&quot;$OCP_TOKEN&quot; --server=&quot;$OCP_SERVER&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Selecting project&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./oc project &quot;${OCP_PROJECT}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./oc start-build my-docker-build --from-dir . -F&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Change : https://downloads-openshift-console.apps.cluster-h4js2.sandbox553.opentlc.com with your Openshift API url.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add the Variables in the project on GITLAB :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;OCP_PROJECT : name of the namespace in Openshift for the project&lt;/li&gt;
  &lt;li&gt;OCP_SERVER  : url of the Openshift API&lt;/li&gt;
  &lt;li&gt;OCP_TOKEN   : Token for the authentification on Openshift&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/04-1.png&quot; alt=&quot;Add the Variables in the project&quot; title=&quot;Variables&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-2-creating-the-container-file-dockerfile&quot;&gt;Step 2: Creating the Container File (Dockerfile)&lt;/h3&gt;

&lt;p&gt;Next, we need to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; which will define our container image. Here’s a simple example:&lt;/p&gt;

&lt;div class=&quot;language-Dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; python:3&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; index.html index.html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ADD&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; server.py server.py&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;EXPOSE&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; 8888&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ENTRYPOINT&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; [&quot;python3&quot;, &quot;server.py&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-3-adding-application-code&quot;&gt;Step 3: Adding Application Code&lt;/h3&gt;

&lt;p&gt;We’ll create a simple HTML file and a Python server script to include in our container image.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;index.html:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;align=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;Test OK
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://blog.fklein.me/images/Logo-Red_Hat.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;server.py:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/python3
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http.server&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPServer&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;socketserver&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThreadingMixIn&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threading&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hostName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0.0.0.0&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8888&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BaseHTTPRequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# curl http://&amp;lt;ServerIP&amp;gt;/index.html
&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# Respond with the file contents.
&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Content-type&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;text/html&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;end_headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;rb&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send_response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadedHTTPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ThreadingMixIn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTTPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Handle requests in a separate thread.&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;webServer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadedHTTPServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Server started http://%s:%s&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hostName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serverPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;webServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;serve_forever&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;webServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;server_close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Server stopped.&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;step-4-configuring-openshift&quot;&gt;Step 4: Configuring OpenShift&lt;/h3&gt;

&lt;p&gt;As we want to build from a Dockerfile, we will use the dockerstrategy with binary source (which allow to send local files from gitlab runner to OpenShift)
 :
&lt;a href=&quot;https://access.redhat.com/documentation/en-us/openshift_container_platform/4.14/html-single/builds_using_buildconfig/index#builds-binary-source_creating-build-inputs&quot;&gt;More information here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To build our Docker image in OpenShift, we need to create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BuildConfig&lt;/code&gt;. This configuration can be created using the following command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;oc new-build &lt;span class=&quot;nt&quot;&gt;--binary&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--strategy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; my-docker-build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/images/03-2.png&quot; alt=&quot;BuildConfigs&quot; title=&quot;BuildConfigs&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-5-running-the-build&quot;&gt;Step 5: Running the Build&lt;/h3&gt;

&lt;p&gt;The final step is to trigger the build from GitLab. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; file we created earlier includes the necessary commands to login to OpenShift, select the project, and start the build.&lt;/p&gt;

&lt;p&gt;You just need to commit the files to the GITLAB repo to trigger the build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/03-1.png&quot; alt=&quot;Run The Build&quot; title=&quot;Build&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;step-6-deploy-the-container&quot;&gt;Step 6: Deploy the container&lt;/h3&gt;

&lt;p&gt;On Openshift UI, on the Developer profile, click on +Add, and Container Images&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/deploy01.png&quot; alt=&quot;deploy&quot; title=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select Image stream tag from internal registry and select the image you have builded, and click on create.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/deploy02.png&quot; alt=&quot;deploy&quot; title=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your app is deployed&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/deploy03.png&quot; alt=&quot;deploy&quot; title=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/deployed.png&quot; alt=&quot;deploy&quot; title=&quot;developer&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With these steps, you’ve set up a CI/CD pipeline in GitLab to build a Docker image using OpenShift. This integration allows you to leverage the powerful features of both platforms to streamline your development and deployment processes.&lt;/p&gt;

&lt;p&gt;For more detailed information on builds in OpenShift, you can refer to the &lt;a href=&quot;file-SsFF1mdi2bfbTnDuI1mOjClJ&quot;&gt;Builds for OpenShift Overview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Happy building!&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.openshift.com&quot;&gt;Red Hat OpenShift Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/&quot;&gt;GitLab CI/CD Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This guide should help you get started with building and deploying container images using GitLab CI/CD and OpenShift. If you have any questions or run into issues, feel free to reach out for support.&lt;/p&gt;

&lt;h3 id=&quot;authors&quot;&gt;Authors&lt;/h3&gt;

&lt;p&gt;This blog post was &lt;strong&gt;co-written&lt;/strong&gt; with my friend &lt;a href=&quot;https://www.linkedin.com/in/sebastien-lallemand/&quot;&gt;&lt;strong&gt;Sebastien Lallemand&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&quot;linkedin-&quot;&gt;Linkedin :&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/sebastien-lallemand/&quot;&gt;Sebastien Lallemand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.linkedin.com/in/fklein82/&quot;&gt;Frédéric Klein&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gallery-box&quot;&gt;
  &lt;div class=&quot;gallery&quot;&gt;
    &lt;img src=&quot;/images/seb.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
     &lt;img src=&quot;/images/fred.jpeg&quot; height=&quot;158&quot; width=&quot;158&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;
</description>
                <pubDate>Tue, 11 Jun 2024 14:01:35 +0200</pubDate>
                <link>http://localhost:4000/post/2024/06/11/gitlab-openshift.html</link>
                <guid isPermaLink="true">http://localhost:4000/post/2024/06/11/gitlab-openshift.html</guid>
                
                <category>Openshift</category>
                
                
            </item>
        
    </channel>
</rss>